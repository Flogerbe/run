<% 
# this little bit of code allows root_path helpers to be used (for ajax queries)
environment.context_class.instance_eval { include Rails.application.routes.url_helpers } %>

var $jq = jQuery.noConflict();
//Have to use $jq alias to save me from decoupling Garmin API from prototype


/**
 * Copyright Â© 2007 Garmin Ltd. or its subsidiaries.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License')
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @fileoverview GarminDeviceControlDemo Demonstrates Garmin.DeviceControl.
 *
 * @author Michael Bina michael.bina.at.garmin.com
 * @version 1.0
 */
var GarminDeviceControlDemo = Class.create();
GarminDeviceControlDemo.prototype = {

	initialize: function(statusDiv, mapId, keysArray) {
		this.status = $(statusDiv);
		this.factory = null;
		this.keys = keysArray;
		
		this.$activity_table = $jq("#activityListing");
		this.checkbox_prefix = "activity_check_";
		this.progress_prefix = "activity_progress_";
		this.upload_prefix = "activity_upload_";
		this.upload_icon_unknown = "glyphicon glyphicon-question-sign";
		this.upload_icon_pending = "glyphicon glyphicon-transfer alert-information";
		this.upload_icon_success = "glyphicon glyphicon-ok-sign alert-success";
		this.upload_icon_error = "glyphicon glyphicon-warning-sign alert-danger";
		this.upload_icon_no = "glyphicon glyphicon-record";
		
		this.queryUploadStatusQueue = null;
		this.uploadPendingQueue={};

		this.findDevicesButton = $("findDevicesButton");
		this.cancelFindDevicesButton = $("cancelFindDevicesButton");

		this.cancelReadDataButton = $("cancelReadDataButton");

		this.progressBar = $("progressBar");
		this.progressBarDisplay = $("progressBarDisplay");

		this.activityListing = $("activityListing");

		this.checkAllBox = $("checkAllBox"); // Checkbox used to check/select all directory checkboxes.
		this.garminController = null;
		this.intializeController();

		this.activityDirectory = null; // Array of activity ID strings in the directory
		this.activitySelection = null; // Array of selected activity objects in the directory
		this.activityQueue = null; // Queue of activity IDs to sync events

		if (this.garminController && this.garminController.isPluginInitialized()) {
			this.garminController.findDevices();
		}
	},

	intializeController: function() {
		try {
			this.garminController = new Garmin.DeviceControl();
			this.garminController.register(this);

			if (this.garminController.unlock(this.keys)) {
				this.setStatus("Plug-in initialized.  Find some devices to get started.");
			} else {
				this.setStatus("The plug-in was not unlocked successfully.");
				this.garminController = null;
			}
		} catch (e) {
			this.handleException(e);
		}
	},

	showProgressBar: function() {
		Element.show(this.progressBar);
	},

	hideProgressBar: function() {
		Element.hide(this.progressBar);
	},

	updateProgressBar: function(value) {
		if (value) {
			var percent = (value <= 100) ? value : 100;
			this.progressBarDisplay.style.width = percent + "%";
		}
	},

	onStartFindDevices: function(json) {
		this.setStatus("Looking for connected Garmin devices");
		this.findDevicesButton.disabled = true;
	},

	onFinishFindDevices: function(json) {
		try {
			this.findDevicesButton.disabled = false;
			this.cancelFindDevicesButton.disabled = true;

			if (json.controller.numDevices > 0) {
				var devices = json.controller.getDevices();
				this.setStatus("Found " + devices.length + " devices.");

				this.listDevices(devices);

				this.cancelReadDataButton.onclick = function() {
					this.cancelReadDataButton.disabled = true;
					this.hideProgressBar();
					this.garminController.cancelReadFromDevice();
				}.bind(this)

			} else {
				this.setStatus("No devices found.");
				this.deviceInfo.innerHTML = "";
			}
		} catch (e) {
			this.handleException(e);
		}
	},

	onCancelFindDevices: function(json) {
		this.setStatus("Find cancelled");
	},

	listDevices: function(devices) {
		var $device_list = $jq("#list_of_devices");
		for (var i = 0; i < devices.length; i++) {
			var $new_link = $jq('<a>').attr({
				class: 'garmin_device btn btn-default btn-block',
				href: '#'
			}).append(devices[i].getDisplayName());
			$new_link.data("device", devices[i]);
			var controller=this;
			$new_link.click(function(event) {
				event.preventDefault();
				//check if we're the currently active device
				if (!$jq(this).hasClass("active")) {
					controller.select_device($jq(this));
				}
			});
			$device_list.append($jq('<li>').append($new_link));
		}
	},

	select_device: function($dev) {
		var device = $dev.data("device");
		$jq("#activities_header").html("Reading activities from " + device.getDisplayName());
		//remove active styling from all items
		$jq(".garmin_device").removeClass("active");
		//and then add it back to this specific one
		$dev.addClass("active");
		//clear any existing activities
		this.activities=new Array();
		this.$activity_table.html('<tr><td>Reading activities from device.</td></tr>');
		//Tell the device ID which unit we're looking at:
		this.garminController.setDeviceNumber(device.getNumber());
		//Trigger a directory read of the device
		this.fileTypeRead=Garmin.DeviceControl.FILE_TYPES.tcxDir
		this.garminController.readDataFromDevice(Garmin.DeviceControl.FILE_TYPES.tcxDir);
	},

	onProgressReadFromDevice: function(json) {
		this.updateProgressBar(json.progress.getPercentage());
		this.setStatus(json.progress);
	},

	onCancelReadFromDevice: function(json) {
		this.setStatus("Read cancelled");
	},

	onFinishReadFromDevice: function(json) {
		try {
			this.setStatus("Processing retrieved data...");
			this.cancelReadDataButton.disabled = true;
			this.hideProgressBar();
			//this.dataString.value = json.controller.gpsDataString;
			//this.compressedDataString.value = json.controller.gpsDataStringCompressed;

			// Factory setting for parsing the data into activities if applicable.
			switch (this.fileTypeRead) {
			case Garmin.DeviceControl.FILE_TYPES.gpx:
				this.factory = Garmin.GpxActivityFactory;
				break;
			case Garmin.DeviceControl.FILE_TYPES.tcx:
			case Garmin.DeviceControl.FILE_TYPES.crs:
			case Garmin.DeviceControl.FILE_TYPES.tcxDir:
			case Garmin.DeviceControl.FILE_TYPES.crsDir:
			case Garmin.DeviceControl.FILE_TYPES.tcxDetail:
			case Garmin.DeviceControl.FILE_TYPES.crsDetail:
				this.factory = Garmin.TcxActivityFactory;
				break;
			default:
				// No factory for unsupported type.
				this.factory = null;
				break;
			}

			// parse the data into activities if possible
			if (this.factory != null) {

				// Convert the data obtained from the device into activities.
				// If we're starting a new read session, start a new activities array
				if (this.activities == null) {
					this.activities = new Array();
				}

				// Populate this.activities
				switch (this.fileTypeRead) {
				case Garmin.DeviceControl.FILE_TYPES.crsDir:
				case Garmin.DeviceControl.FILE_TYPES.tcxDir:
					this.activities = this.factory.parseDocument(json.controller.gpsData);

					if (this.activities != null) {
						// If we read a directory, save the directory for the session
						this.display_activity_list();
					}
					break;
				case Garmin.DeviceControl.FILE_TYPES.tcxDetail:
				case Garmin.DeviceControl.FILE_TYPES.crsDetail:

					// Store this read activity
					this.uploadToServer(this.factory.parseDocument(json.controller.gpsData), json.controller.gpsDataStringCompressed)

					// Not finished with the activity queue
					if (this.activityQueue.length > 0) {
						this._readSelectedActivities();

						// Cleanest way to deal with the js single-thread issue for now.
						// Cutting out to immediately move on to the next activity in the queue before listing.
						return;
					}

					break;
				default:
					this.activities = this.factory.parseDocument(json.controller.gpsData);
					break;
				}
			}

			// Finished reading activities in queue, if any
			if (this.activityQueue == null || this.activityQueue.length == 0) {

				if (this.fileTypeRead != Garmin.DeviceControl.FILE_TYPES.tcxDir && this.fileTypeRead != Garmin.DeviceControl.FILE_TYPES.crsDir) {
					// List the activities (and display on Google Map)
					if (this.activities != null) {
						this.setStatus("Listing activities...");
						//this.setStatus(new Template("Results: #{routes} routes, #{tracks} tracks and  #{waypoints} waypoints found").evaluate(summary));
					} else {
						this.setStatus("Finished retrieving data.");
					}
				} else {
					// List the activity directory
					if (this.activities != null) {
						this.setStatus("Listing activity directory...");
						//this.setStatus( new Template("Results: #{routes} routes, #{tracks} tracks and  #{waypoints} waypoints found").evaluate(summary) );
					} else {
						this.setStatus("Finished retrieving data.");
					}
				}

				// Disable appropriate buttons after read is finished
				switch (this.fileTypeRead) {
				case Garmin.DeviceControl.FILE_TYPES.gpx:
					break;
				case Garmin.DeviceControl.FILE_TYPES.tcx:
				case Garmin.DeviceControl.FILE_TYPES.crs:
					// Display the track selected by default, if there is one.
					if (this.readTracksSelect.onchange) {
						this.readTracksSelect.onchange();
					}
					break;
				case Garmin.DeviceControl.FILE_TYPES.tcxDir:
				case Garmin.DeviceControl.FILE_TYPES.crsDir:
					this.checkAllBox.disabled = false;
					break;
				case Garmin.DeviceControl.FILE_TYPES.tcxDetail:
				case Garmin.DeviceControl.FILE_TYPES.crsDetail:
					this.checkAllBox.disabled = false;
					break;
				}
			}

		} catch (e) {
			this.handleException(e);
		}
	},

	/** Reads the user-selected activities from the device by using the activity queue. 
	 */
	_readSelectedActivities: function() {
		// Find the first item in the queue and process it
		if (this.activityQueue.length>0) {
			var currentActivity = this.activityQueue.shift();
			//add it to the upload pending queue
			this.uploadPendingQueue[$(currentActivity).value]=$(currentActivity).id.replace(this.checkbox_prefix,'');
			this.garminController.readDetailFromDevice(this.fileTypeRead, $(currentActivity).value);
		}
	},
	
	uploadToServer: function(activities_up, gpsData) {
	//construct JSON for this activity
	var json = {};
	var controller = this;
	for (i = 0; i < activities_up.length; i++) {
		var activity = activities_up[i];
		var series = activity.getSeries();
		
		var ascent_descent=getTotalAscentDescent(activity);
		var time_series=getTimeSeries(activity);
		
		var lat_long_series=getLatLongSeries(activity);
		
		var heart_rate_series=getHeartRateSeries(activity);
		
		var elevation_series=getElevationSeries(activity);
		
		var distance_series=getDistanceSeries(activity);

		// loop through each series in the activity
		for (var j = 0; j < series.length; j++) {
			//currently does nothing, left here to remind me to work out totals
		}
		var startDate=activity.getStartTime();
		var endDate = activity.getEndTime();
		json = {
			start_time: activity.getStartTime().getDate().toJSON(),
			duration: activity.getSummaryValue(Garmin.Activity.SUMMARY_KEYS.totalTime).getValue()/1000,
			distance: activity.getSummaryValue(Garmin.Activity.SUMMARY_KEYS.totalDistance).getValue(),
			height_gain: ascent_descent[0],
			gpx: gpsData,
			time_series: JSON.stringify(time_series),
			lat_long_series: JSON.stringify(lat_long_series),
			hr_series: JSON.stringify(heart_rate_series),
			elevation_series: JSON.stringify(elevation_series),
			distance_series: JSON.stringify(distance_series),
			activity_type: activity.getAttribute("activitySport"),
			internal_id: this.uploadPendingQueue[activity.getAttribute("activityName")]
		};
		//post it to the server
		$jq.post('<%=activities_path%>', json, function(data, textStatus, jqXHR) {
			//update the view to show we've uploaded this and it's a success
			controller.modify_upload_status_icon(data);
			}, "json");
			break;
	}


	},

	display_activity_list: function() {
		var new_activities = '';
		//initialise our query queues
		this.queryUploadStatusQueue=new Array();
		this.activityQueue = new Array();	
		for (var i = 0; i < this.activities.length; i++) {
			var activity = this.activities[i];
			var name = activity.getAttribute("activityName");
			var description = activity.getSummaryValue(Garmin.Activity.SUMMARY_KEYS.startTime).getValue().getDate().toLocaleDateString() + " (Duration: " + activity.getStartTime().getDurationTo(activity.getEndTime()) + ")";
			//construct the HTML to output for this activity
			new_activities += '<tr>\n<td><input type="checkbox" class="activity_check" disabled=true id="'+ this.checkbox_prefix + i + '" value="' + name + '"/></td>\n';
			new_activities += '<td id="'+this.progress_prefix+i+'">' + description + '</td>\n';
			new_activities += '<td><span id="'+this.upload_prefix+i+'" class="'+this.upload_icon_unknown+'"></span></td>\n</tr>';
			//add it to the query status queue, so we can find out if we've already uploaded this one
			var activity_info={internal_id: i, start_time: name};
			this.queryUploadStatusQueue.push(activity_info);
		}
		this.$activity_table.html(new_activities);
		this._findUploadStatus();
		var controller=this; //set this here so we can use it in the callback function
		//Add event handlers to these items
		$jq("input.activity_check").click(function(event) {
			//check to see if we've already processed (or are processing) this item
			if (!this.disabled) {
				this.disabled=true;
				//set the icon to pending
				var $upload_icon=$jq("#"+this.id.replace(controller.checkbox_prefix,controller.upload_prefix));
				$upload_icon.removeClass().addClass(controller.upload_icon_pending);
				controller.activityQueue.push(this.id);
				//change file read mode to detail
				controller.fileTypeRead = Garmin.DeviceControl.FILE_TYPES.tcxDetail;
				controller._readSelectedActivities();
			}
		});
	},
	
	
	//this function takes a {start_date, internal_id} hash
	//(where internal_id is checkbox id number)
	//and queries the server for the upload status
	_findUploadStatusForActivity: function(start_date_internal_id) {
		//not sure if this is supported or not, but it seems to work
		//set the controller variable here so we can use it in the anonymous
		//callback function below
		var controller=this;
		$jq.getJSON('<%= activity_check_path %>',start_date_internal_id).done(function(json) {
			controller.modify_upload_status_icon(json);
		});
	},
	
	modify_upload_status_icon: function(json){
		var $upload_icon=$jq('#'+this.upload_prefix+json.internal_id);
		var $checkbox=$jq('#'+this.checkbox_prefix+json.internal_id);
		$upload_icon.removeClass();
		//if we get an id value of -1 it means we haven't uploaded this item yet
		if (json.id!=-1){
			$upload_icon.addClass(this.upload_icon_success);
			//tell the checkbox we've got it
			$checkbox[0].checked=true;
			//and disable it so we don't try again
			//([0] makes it operate direct on the DOM object)
			$checkbox[0].disabled=true;
		} else {
			$upload_icon.addClass(this.upload_icon_no);
			$checkbox[0].disabled=false;
			$checkbox[0].checked=false;
		}
	},
	// fires off requests to the DB to find out which items have been uploaded
	_findUploadStatus: function() {
		for (var i=0; i<this.queryUploadStatusQueue.length; i++) {
			this._findUploadStatusForActivity(this.queryUploadStatusQueue[i]);
		}
	},

	/** Selects all checkboxes in the activity directory, which selects all activities to be read from the device.
	 */
	_checkAllDirectory: function() {
		for (var boxIndex = 0; boxIndex < this.activityDirectory.length; boxIndex++) {
			$("activityItemCheckbox" + boxIndex).checked = this.checkAllBox.checked;
		}
	},

	onException: function(json) {
		this.handleException(json.msg);
	},

	handleException: function(error) {
		var msg = error.name + ": " + error.message;
		if (Garmin.PluginUtils.isDeviceErrorXml(error)) {
			msg = Garmin.PluginUtils.getDeviceErrorMessage(error);
		}
		this.setStatus(msg);
		alert(msg);
	},

	setStatus: function(statusText) {
		this.status.innerHTML = statusText;
	}
};

function getTotalAscentDescent(activity) {
	var series=activity.getHistorySeries();
	var total=[0,0];
	var lastVal=parseFloat(series.getSample(0).getMeasurementValue(Garmin.Sample.MEASUREMENT_KEYS.elevation));
	for (var i=1;i<series.getSamplesLength();i++) {
		var this_val=parseFloat(series.getSample(i).getMeasurementValue(Garmin.Sample.MEASUREMENT_KEYS.elevation));
		//get height delta
		var val=this_val-lastVal;
		if (val>0) {
			total[0]+=val;
		} else if(val<0) {
			total[1]+=-1*val;
		}
		lastVal=this_val;
	}
	return total;
}
function getTimeSeries(activity) {
	var series=activity.getHistorySeries();
	var series_array=[];
	for (var i=0;i<series.getSamplesLength();i++) {
		series_array.push(series.getSample(i).getTime().getDate().toJSON());
	}
	return series_array;
}

function getElevationSeries(activity) {
	var series=activity.getHistorySeries();
	return getSeriesArrayFloat(series, Garmin.Sample.MEASUREMENT_KEYS.elevation);
}

function getDistanceSeries(activity) {
	var series=activity.getHistorySeries();
	return getSeriesArrayFloat(series, Garmin.Sample.MEASUREMENT_KEYS.distance);
}


function getHeartRateSeries(activity) {
	var series=activity.getHistorySeries();
	return getSeriesArrayFloat(series, Garmin.Sample.MEASUREMENT_KEYS.heartRate);
}

function getLatLongSeries(activity) {
	var series=activity.getHistorySeries();
	var lat_series=getSeriesArrayFloat(series, Garmin.Sample.MEASUREMENT_KEYS.latitude);
	var long_series=getSeriesArrayFloat(series, Garmin.Sample.MEASUREMENT_KEYS.longitude);
	var lat_long_series=[];
	for (var i=0;i<lat_series.length;i++) {
		lat_long_series[i]=[lat_series[i],long_series[i]];
	}
	return lat_long_series;
}

function getSeriesArray(series, mode) {
	var series_array=[];
	for (var i=0;i<series.getSamplesLength();i++) {
		series_array.push(series.getSample(i).getMeasurementValue(mode));
	}
	return series_array;
}

function getSeriesArrayFloat(series, mode) {
	var series_array=[];
	for (var i=0;i<series.getSamplesLength();i++) {
		series_array.push(parseFloat(series.getSample(i).getMeasurementValue(mode)));
	}
	return series_array;
}



var display;

function find_garmin_devices() {
	display = new GarminDeviceControlDemo("statusText", "readMap",
	["http://run.petewest.org","a640806a0d1262ae4d2b43733773f3f0"]
	);
}
